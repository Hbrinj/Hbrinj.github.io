<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SwiftUI on A Look of Introspection</title><link>https://hbrinj.github.io/tags/swiftui/</link><description>Recent content in SwiftUI on A Look of Introspection</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 10 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://hbrinj.github.io/tags/swiftui/index.xml" rel="self" type="application/rss+xml"/><item><title>SwiftUI Super Powered - ViewBuilders</title><link>https://hbrinj.github.io/posts/swiftui-viewbuilders/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><guid>https://hbrinj.github.io/posts/swiftui-viewbuilders/</guid><description>The Problem How can a View be augmented with new properties without having a knock on effect, changing all other uses of said view?
The solution ViewBuilders, a parameter attribute which allows you to supplement an existing view by capturing it as a view producing closure. The example we&amp;rsquo;ll work with today is the concept of turning an existing view, used to represent a row in a List view, into a view which displays where it has been selected.</description></item><item><title>SwiftUI Super Powered</title><link>https://hbrinj.github.io/posts/swiftuipowered/</link><pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate><guid>https://hbrinj.github.io/posts/swiftuipowered/</guid><description>I&amp;rsquo;ve been working on a project which is going to be focusing on using SwiftUI in its entirety. The project is pretty straight forward in that there are numerous applications on the app store that provide a solution to this problem. It is a resource tracker that generates a QR code which can be used to identify one or more assets. Resources can also be grouped into boxes. The app is meant to do one thing and do it well.</description></item></channel></rss>